<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnRefresh.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABMAAAATCAYAAAByUDbMAAAABGdBTUEAAK/INwWK6QAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAB3RJTUUH4QURDyAqdOp3RAAAABl0RVh0
        U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAASPSURBVDhPlZRZTFNZGMePidGoD5pJeJlRigUX
        oFLKTrlQVlsKhbaIbKWUQluKQlsQK7UsQqkzLLUUKbS2lk0mMA44DGCqdkpFh5G44ZjoGwmTGBMfTAyG
        BCPfHMf7Mj5Mxl/y5Sb3y/3lfOf+z0H/h4LRnE8VWjCSIxc4MvcQLdGI159Bdr8Svp2N+Fc4ybm24zOc
        3mQ128zaxzEnk90v0NyTo4al6h1Kj5gqu1nMk/xysq7kJ2FPwTWeXXA105llTbMJbVx36XD+28Irgucp
        HQkKRkOoX6yeQRpIVAuV29Q+2V6Zu4Sl9sgNOq/Kp/fWrek8dZvn3Cqon6uG2mk5qG9UQeO8BjTT1R/4
        Fu5jpj5aGiSj+B2rPUKaMDWe8l1V7tJ0jUfhal3Uvrr0wAjWhz3gXOkH1zMrOFb6YPDJJeh72AU9uGe4
        2wTF9hMQr4u6ESQLYIacOkyaMNVuMa36ZpnVcE/32v6kF4aeDYD1kQksD7qga7EdOhaa4YKnEZpva6HJ
        cxYa5lVbuWbuu8h6uoNSdoBxSEYlTRj5rEij86hfWpZ/ANfKAAw+MoPR1/JROSndzDZnvE81JqwTLTHr
        Ke3EhsCStZXVfXydoaaNHKo8SDe5T6N/ySQ/n7ze6tW+6VvuxOOZoPmWdlNozVrNNKWOplxkpsXqw2mR
        2mPBdHWIkl4b8oJ26ujE4Upq2Df8vdv9Rd+SFpLCsdxVyY+FGxXjJVA2XLh1YoC3ltge08dsiYyIa2Ls
        jG+OQFQJBVHLKTFUiX9nUAWFWTzOTxBNCIn8oWyCb+MQXEsakdGTRCChkzuZbU2fyjAlTrMuxk0ltEY5
        Ys8zpBndSbvr7snpmkWZH8ecggLEB/wopfvp2f3pu4vHBVKBk+PI6k/F3yVNp3zPnGIZ4iZR9uV0gn2J
        ReAXBHEhhog+F07E6BgJilulzBpveedpb3kMLsR3cBDfydmJnxG5dnaf5FrhGp5mS+TKh5xe9gazOWqV
        HPYzNQtSVLVQul3jk4fV+6omVB7ZC+W8WJk3zA3GK6HlObPSioYFo8Uu4eqFO42bFrzPhoUmkI2VvYnS
        0q+TGoRO35Ggp/AXzp2U3uCrHjEu6ddxXLZq5yo3xJP560WjgvXiYeF7HOBNg1f/sWepA7r/6IAzMzWQ
        a858SVcHa0jVZ5nytohxxqt0GH/Xvxv6c2DrU+Zsj83Qt9wFpiUjdN1vh877bWBY1IPxfgto59WQb+W/
        DteEWoOVh2ikCiHFvAhVzhUx1W75DcPd8zD8bBCXDa6uWMH+1AL9OMhmnMWLi61wdl4FsvEy4Jk4r6Ib
        wl2BFQHpgRUHd5EqhCp/LUHS2UI/xYxYqp5VPG77TfcB7wuopqqgYkwEZa6if45Rfn/OJs/EXkszJPki
        68IMAeLvWNRy/724tpGqz+QNcRHfxfYrGMlV4L/1vMSV95bbm+ZOaIuy4fA6GQ00+zHVkZ6jysC6wAoK
        D8eFGlC6fwcu0vAF+K5C+K7ah+OixidghtURn5zcEU92v5KM7kR8q/JQsjF+D7MlSo7zE4qL7P4XCP0N
        OJULFxdYfTcAAAAASUVORK5CYII=
</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>When executed caching will start at the current CacheProgress date and proceed until the date/time is Now - Lag delay.  After this the cache will not be run again until LoadDelay data is available to be fetched (including the lag period).  Chunk Period is the amount of data to request at a time through the Cache Pipeline</value>
  </data>
</root>