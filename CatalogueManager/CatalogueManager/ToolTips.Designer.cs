//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CatalogueManager {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ToolTips {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ToolTips() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CatalogueManager.ToolTips", typeof(ToolTips).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default the QueryBuilder will automatically determine which tables need to be joined in order to execute a given aggregate.  This is done by finding JoinInfo for all the tables that are in the &apos;selected dimensions&apos; list.
        ///
        ///But sometimes you want to Join on a table even though it is not included in the &apos;Selected Dimensions&apos; list.  For example (see diagram), you want an aggregate of all the events in a given country but if you only aggregate countries you will get a distinct list of countries only (with a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AggregateForceJoins {
            get {
                return ResourceManager.GetString("AggregateForceJoins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ANOTable is an identifier mapping table that stores identifiable values and anonymous substitutions.  This allows you to split identifiers (such as CHI, GP code, Location Codes etc) into their own data repository (database) leaving only the actual research data (condition codes, admission dates etc) in main repository.  ANOTabling is different from identifier dumping (in which fields such as Forename,Surname etc are dropped entirely) because a substitution is performed (to the anonymous version) allowing [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ANOTablesConfiguration {
            get {
                return ResourceManager.GetString("ANOTablesConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This diagram explains the 5 core data objects that drive CatalogueManager and DataExportManager.
        ///
        ///A Catalogue is a product that can be made available to researchers, it has descriptive metadata, attachments etc.
        ///A CatalougeItem is a column that the researcher will see in his extracted product, it may be directly extracted or it may be transformed in some way (e.g. data cleaning on extract).
        ///An ExtractionInformation is a declaration that a given CatalogueItem is powered by a given ColumnInfo and it descr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CatalogueDataModel {
            get {
                return ResourceManager.GetString("CatalogueDataModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Tab lets you edit the descriptive metadata for your Catalogues (datasets).  Right clicking a Catalogue will bring up a menu with a list of Catalogue level operations e.g. choosing which of the CatalogueItems in the catalogue is most indicative of record time periodicity (e.g. admission date of a hostpital admissions record).
        ///
        ///GETTING STARTED: If this is your first time launching the software it is likely that you do not yet have any Catalogues (datasets) available.  Your first step should be either:
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CatalogueTabListbox {
            get {
                return ResourceManager.GetString("CatalogueTabListbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Catalogue database holds all the information about datasets that you can see in the CatalogueManager, this includes 
        ///
        ///Descriptive data,Load logic,Technical knowledge about underlying tables (joins, collations etc),Filter logic,Aggregate generation logic,Validation logic,Issues,Supporting Documents,Extraction transforms etc
        ///
        ///If you are seeing this screen then you either opted to change platform database settings or the program detected a problem with the currently configured settings and is giving yo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChoosePlatformDatabase {
            get {
                return ResourceManager.GetString("ChoosePlatformDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credentials allow certain users to access different areas of the platform and are designed to be set up once and then be used in the background seamlessly during checks. Credentials cannot be deleted if they have a relationship with a table info; the link must be broken between them before a set can be removed..
        /// </summary>
        internal static string ConfigureCredentialsAddEdit {
            get {
                return ResourceManager.GetString("ConfigureCredentialsAddEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Linkages between credentials and tableinfos can be broken by pressing the delete key while highlighting the linked tableinfo/credentials. .
        /// </summary>
        internal static string ConfigureCredentialsBreakLinkage {
            get {
                return ResourceManager.GetString("ConfigureCredentialsBreakLinkage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once you have selected a set of credentials and a tableinfo, you can choose what context to tie them together with. Users must use credentials with the correct context to perform certain actions and will be denied continuation if they are wrong..
        /// </summary>
        internal static string ConfigureCredentialsExistingRelationships {
            get {
                return ResourceManager.GetString("ConfigureCredentialsExistingRelationships", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The permissions visualiser lets you see the various relationships a set of credentials and a table info might have..
        /// </summary>
        internal static string ConfigureCredentialsPermissionsVisualiser {
            get {
                return ResourceManager.GetString("ConfigureCredentialsPermissionsVisualiser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This interface lets you quickly define multiple lookup tables and incorporate them into the extraction of a dataset.  If you only want a specific lookup table (perhaps with many columns) to be extracted alongside your dataset then you should use &apos;Supporting SQL&apos; instead (Right Click a Catalogue).  
        ///
        ///If however you have some codes that you want to allow inline description then this interface is for you! (e.g. you want the ability to extract &quot;Bob,105,2001-01-01,T,Tayside&quot;  where &apos;T&apos; is a foreign key into a  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConfigureLookups {
            get {
                return ResourceManager.GetString("ConfigureLookups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The diagnostics screen lets you check for catastrophic problems with your Catalogue or DataExportManager databases (missing fields, missing tables etc).  Selecting one of the &apos;checks&apos; buttons will bring up a series of results indicating successful checks and failed checks.  Any checks that appear as Ex have Exceptions associated with them, you can double click an Ex entry to view more detail including a StackTrace (which can be handy for bug reporting)
        ///
        ///In addition this screen lets you create (or reset/re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DiagnosticsScreen {
            get {
                return ResourceManager.GetString("DiagnosticsScreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This dialog lets you generate interesting test data in which to practice tasks such as importing data, generating cohorts and performing project extractions.  Note that ALL the data generated is completely fictional.  Test data is generated randomly usually around a distribution (e.g. there are more prescriptions for Paracetamol/Aspirin than Morphine) but complex relationships are not modelled (e.g. theres no concept of someone being diabetic so just because someone is on INSULIN doesn&apos;t mean they will have [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ExerciseData {
            get {
                return ResourceManager.GetString("ExerciseData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RDMP was designed and implemented to hold sensitive health datasets generated by third party data controllers and in anonymous form for reasearch purposes.  To this end it has a fully featured Governance system for tracking third party permission to hold datasets.  This usually takes the form of a collection of documents (e.g. PDFs and Emails) between your agency and your data providers which grants you permission to hold the datasets for specific periods.  It may be that you don’t need permission to ho [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Governance {
            get {
                return ResourceManager.GetString("Governance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Similar to the &apos;TOP 1&apos; button, this button tests whether Extraction SQL is available for each Catalogue.  This button will only perform a syntax check (ensuring that Extraction SQL can be generated) and will not actually execute the SQL (which is what the TOP 1 button does).
        ///
        ///There are a number of reasons a dataset may fail Extraction SQL generation (in which case it will appear in red), these include:
        ///	- Selecting from multiple underlying TableInfos without configuring JoinInfo
        ///	- Misconfiguration/Bad  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HighlightButton {
            get {
                return ResourceManager.GetString("HighlightButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hot/Cold is a Catalogue (Dataset) level flag that is designed to allow you to easily distinguish between your main datasets which you frequently extract and are well maintained and those that are maintained for niche extracts and may be poorly or completely undocumented.  
        ///
        ///Examples of candidates for Cold Storage include researcher datasets e.g. Researcher X wants you to store a 5,000 questionnaire responses in a table (5,000 rows 200 columns), he doesn&apos;t give you descriptions for the columns but wants yo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HotVsColdStorage {
            get {
                return ResourceManager.GetString("HotVsColdStorage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This dialog will let you import a flat file and create a Catalogue, this is done through the creation of a new / reuse of an existing Pipeline.  If this is your first time then most likely a simple pipeline with a CSV / Excel source will be all you need.  But the functionality exists to write your own &apos;freaky file type&apos; plugin sources or perform &apos;load time substitutions&apos; (e.g. Indexer/Linker) or do just about anything else your agency requires you to do..
        /// </summary>
        internal static string ImportFlatFile {
            get {
                return ResourceManager.GetString("ImportFlatFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This pane lets you choose a database table and automatically generated a TableInfo and ColumnInfos set of Technical metadata.  These objects can then be used to automatically create a new Catalogue or augment an existing Catalogue.  
        ///
        ///A typical use case would be where you have two tables which are joined on a single primary/foreign key.  Each table would be selected in turn, the first would be used to generate a new Catalogue and the second would be added to the same Catalogue.  You would then configure a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ImportTableInfo {
            get {
                return ResourceManager.GetString("ImportTableInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Live/Deprecated and Internal/Public are two flag states a Catalogue (dataset) can be in.  By default the radio buttons are set such that only &apos;public&apos;,&apos;live&apos; Catalogues are visible.  If you want to see &apos;public&apos; deprecated Catalogues, switch the Deprecated radio button.
        ///
        ///It is preferred that you never delete a Catalogue when you have used it for DataLoads or DataExtractions because other entities/programs within the framework may have references to the Catalogue ID and will not be happy if Catalogues start [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InternalOnlyRadio {
            get {
                return ResourceManager.GetString("InternalOnlyRadio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sometimes (rarely) it is necessary to designate a TableInfo as a Primary Extraction Table.  In the above example there are 3 tables, the Person table is joined to the Address and Car tables via relationships.  Assume these are imported into the Data Catalogue under a single Catalogue (Person) and configured as Extractable columns (See CatalogueItem Tab).  QueryBuilder is unable to generate Extraction SQL.
        ///
        ///The reason that Extraction SQL cannot be generated initially is because of a variance in results i.e [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IsPrimaryExtractionTable {
            get {
                return ResourceManager.GetString("IsPrimaryExtractionTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tracking problems you have with your datasets is important and the Data Catalogue allows for this through the Issue system.  Issues are tied to CatalogueItem (not ColumnInfo) objects, this allows there to be issues with a given transform e.g. a problem with &apos;CleanAdmissionCode&apos; but no problem with &apos;AdmissionCode&apos; even though both CatalogueItems own the same underlying ColumnInfo.
        ///
        ///You can tie your issues in the Catalogue to your existing ticketing/work logging system (e.g. JIRA or Fogbugz) by setting up a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IssueUI {
            get {
                return ResourceManager.GetString("IssueUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ManageExternalServers {
            get {
                return ResourceManager.GetString("ManageExternalServers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a one to many relationship between Catalogues (Datasets) and CatalogueItems (Virtual Columns).  For example hospital admisisions has columns for &apos;patient identifier&apos;, &apos;date of admission&apos;, &apos;condition of patient etc.  This button will overwrite the Topic and Periodicity data of all CatalogueItems with the values in the Catalogue (the values in the controls to the left).  This can be used for example when all columns in a dataset are received at the same time e.g. monthly and no columns in the dataset [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OverwriteValues {
            get {
                return ResourceManager.GetString("OverwriteValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Diagnostic screen allows you to setup a &apos;Test Dataset&apos;.  This creates an example dataset in an SQL Server Database, imports it into the Catalogue database as a new dataset and creates some additional artifacts such as a data load configuration, an extraction configuration (optionally anonymisation too) and some attachments / extraction logic / filters etc.
        ///
        ///This gives you a sandbox in which to explore the capabilities of the RMDP software and learn it&apos;s strengths and weaknesses.  After you have played [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SetupTestDataset {
            get {
                return ResourceManager.GetString("SetupTestDataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supporting documents are useful binary documents such as PDF files, Word Documents etc.  These documents support understanding particular datasets and might often be provided by a third party e.g. the metadata provided to you by a dataset supplier.  You should extract knowledge from these files and integrate them into the Catalogue and CatalogueItem descriptions but having the original attachement available too is also useful.
        ///
        ///If you check Extractable then it will make the document available to researche [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SupportingDocumentsViewer {
            get {
                return ResourceManager.GetString("SupportingDocumentsViewer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Data Catalogue can store and extract unstructured data tables.  These might be lookup tables or audit logs or any other data you want to bundle along with your extracts.
        ///
        ///It is important to remember that this is UNSTRUCTURED and should NOT be used for proper datasets (Catalogues).  It is especially important that you do not write queries that expose private identifiers as SupportingSQLTables are extracted verbatim and do not undergo project anonymisation.
        ///
        ///After entering the SQL, a description and n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SupportingSqlTableViewer {
            get {
                return ResourceManager.GetString("SupportingSqlTableViewer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TableInfos contain the Data Catalogue&apos;s knowledge of tables under your control.  This includes the server,database, table name as well as some additional technical information e.g. which columns should be anonymised.
        ///
        ///Each TableInfo has one or more ColumnInfos (one per Column in the underlying database).  These contain information some &apos;cached&apos; information such as data type, , primary key status, collation etc.  ColumnInfos are also used as a source of configuring extractability at a Catalogue level.  A s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TableInfoTabListbox {
            get {
                return ResourceManager.GetString("TableInfoTabListbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This control lets you reference a ticket in your ticketing system (e.g. JIRA, fogbugz etc).  The control has a location for you to record the ticket identifier (e.g. LINK-123) and a button for launching the ticketing system (exact implementation of this will depend on how you have configured the TicketingSystemConfiguration).
        ///
        ///This control is used for storing a ticket against an object in the database e.g. a researchers dataset extraction request or a bug report about a column in a dataset..
        /// </summary>
        internal static string TicketingControl {
            get {
                return ResourceManager.GetString("TicketingControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Top 1 button provides a way of testing whether the Extraction SQL configured for your datasets actually works against your live database.  It is possible to configure ExtractionInformation that is Syntactically correct (as far as the CatalogueManager is concerned) but which will fail when run e.g. reference a non existent scalar function.
        ///
        ///Clicking this button will take each Catalogue (dataset) in turn and work out it&apos;s Extraction SQL.  This SQL is then given a TOP 1 constraint (to improve performance [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TOP1Catalogues {
            get {
                return ResourceManager.GetString("TOP1Catalogues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a one to many relationship between Catalogues (Datasets) and CatalogueItems (Virtual Columns).  For example, in the screenshot above, hospital admissions (isd_smr01) has columns for &apos;CHI&apos; (patient identifier), &apos;ADMISSION_DATE&apos;, &apos;DATE_OF_MAIN_OPERATION&apos; etc.  Select a Catalogue in order to view the CatalogueItems it contains.
        ///
        ///Note that it is possible for there to be CatalogueItems that are named differently to their underlying database column, for example there could be a CatalogueItem Age which  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WhatIsACatalogue {
            get {
                return ResourceManager.GetString("WhatIsACatalogue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CatalogueItems are &apos;virtual columns&apos; within a Catalogue (dataset).  They exist independently of underlying database architecture.  This allows you to define a CatalogueItem such as &apos;Admission Date&apos; and populate it&apos;s descriptive data before you wire it up to an actual database column.
        ///
        ///Later on if you rename or delete the underlying database column, the descriptive CatalogueItem is not affected and can be rewired to a new underlying column.  
        ///
        ///In addition to providing a level of separation between descri [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WhatIsACatalogueItem {
            get {
                return ResourceManager.GetString("WhatIsACatalogueItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ColumnInfos are database columns.  They map to actual database columns in a database table.  All ColumnInfos belong to a parent TableInfo that contains information about the underlying database Table.  ColumnInfos/TableInfos contain information that can be automatically calculated from the database e.g. DataType, Format (e.g. Collation), Primary Key status etc.  
        ///
        ///In addition to this ColumnInfos/TableInfos contain information such as:
        ///	- How a table is joined during lookup operations (Left/Right/Outer/Lo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WhatIsAColumnInfo {
            get {
                return ResourceManager.GetString("WhatIsAColumnInfo", resourceCulture);
            }
        }
    }
}
