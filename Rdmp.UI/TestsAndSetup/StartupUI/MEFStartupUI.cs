// Copyright (c) The University of Dundee 2018-2019
// This file is part of the Research Data Management Platform (RDMP).
// RDMP is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// RDMP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with RDMP. If not, see <https://www.gnu.org/licenses/>.

using System;
using System.IO;
using System.Windows.Forms;
using Rdmp.Core.Startup.Events;
using ReusableLibraryCode.Checks;
using ReusableUIComponents;

namespace Rdmp.UI.TestsAndSetup.StartupUI
{
    /// <summary>
    /// The RDMP software is built to be extensible, we recognise that sometimes as data analysts we are called upon to routinely load a particularly crazy/proprietary file type or 
    /// our managers decide they want to be sent an email every time someone does a data extraction.  This is where plugins come in.  You can write a plugin by referencing the
    /// HIC.RDMP.Plugin nuget package and writing a class file that implements the appropriate interface (e.g. IAttacher of you have a crazy file etype).
    /// 
    /// <para>You then upload the plugin into your local Catalogue Database via 'Upload Plugin...' from the main menu of CatalogueManager.exe.  This will embed the binary dll and 
    /// if available .pdb binary (debugging symbols which let you see your line numbers in error messages generated by your plugin) as a record in the LoadModuleAssembly table.</para>
    /// 
    /// <para>This control is part of the 'Technical' tab of StartupUIMainForm and it shows the progress of identifying and downloading the plugin into the AppData directory and loading
    /// it into memory.  You can click the hyperlink to open the AppData directory used.  Clicking the smiley faces will show you the progress messages that were generated during the
    /// loading (and any errors).</para>
    /// 
    /// <para>If one of your plugins fails to load correctly then the 'User Friendly' UI will show a yellow face instead of a green one but the software will continue to load without your 
    /// plugin functionality being available.</para>
    /// </summary>
    public partial class MEFStartupUI : UserControl, ICheckNotifier
    {
        public MEFStartupUI()
        {
            InitializeComponent();
            
            DoTransparencyProperly.ThisHoversOver(ragSmiley1,pbFolder);
            DoTransparencyProperly.ThisHoversOver(ragSmiley2, pbDosBox);
            DoTransparencyProperly.ThisHoversOver(lblFilesDownloaded,pbDownloadArrow);
            DoTransparencyProperly.ThisHoversOver(lblFilesLoaded, pbBigArrowPointingRight);
        }


        public bool OnCheckPerformed(CheckEventArgs args)
        {
            filesLoaded++;

            ragSmiley2.OnCheckPerformed(args);

            lblFilesLoaded.Text = filesLoaded + " Files";
            return false;
        }

        public void HandleDownload(MEFFileDownloadProgressEventArgs eventArgs)
        {
            pathLinkLabel1.Text = eventArgs.DownloadDirectory.FullName;


            lblFilesDownloaded.Text = eventArgs.CurrentDllNumber + "/" + eventArgs.DllsSeenInCatalogue + " files";

            foreach (FileInfo zipFile in eventArgs.DownloadDirectory.EnumerateFiles("*.zip"))
                ViewSourceCodeDialog.AddSupplementalSourceZipFile(zipFile);

            switch (eventArgs.Status)
            {
                case MEFFileDownloadEventStatus.Success:
                    break;
                case MEFFileDownloadEventStatus.FailedDueToFileLock:
                    ragSmiley1.Warning(eventArgs.Exception);
                    break;
                case MEFFileDownloadEventStatus.OtherError:
                    ragSmiley1.Fatal(eventArgs.Exception);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private int filesLoaded = 0;

        public void Reset()
        {
            filesLoaded = 0;
            
            ragSmiley1.Reset();
            ragSmiley2.Reset();
        }
    }
}
